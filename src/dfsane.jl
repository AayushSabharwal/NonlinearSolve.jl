"""
    DFSane(; œÉ‚Çò·µ¢‚Çô::Real = 1e-10, œÉ‚Çò‚Çê‚Çì::Real = 1e10, œÉ‚ÇÅ::Real = 1.0,
        M::Int = 10, Œ≥::Real = 1e-4, œÑ‚Çò·µ¢‚Çô::Real = 0.1, œÑ‚Çò‚Çê‚Çì::Real = 0.5,
        n‚Çë‚Çì‚Çö::Int = 2, Œ∑‚Çõ::Function = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ / n^2,
        max_inner_iterations::Int = 1000)

A low-overhead and allocation-free implementation of the df-sane method for solving large-scale nonlinear
systems of equations. For in depth information about all the parameters and the algorithm,
see the paper: [W LaCruz, JM Martinez, and M Raydan (2006), Spectral residual mathod without
gradient information for solving large-scale nonlinear systems of equations, Mathematics of
Computation, 75, 1429-1448.](https://www.researchgate.net/publication/220576479_Spectral_Residual_Method_without_Gradient_Information_for_Solving_Large-Scale_Nonlinear_Systems_of_Equations)

See also the implementation in [SimpleNonlinearSolve.jl](https://github.com/SciML/SimpleNonlinearSolve.jl/blob/main/src/dfsane.jl)

### Keyword Arguments

- `œÉ‚Çò·µ¢‚Çô`: the minimum value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm. Defaults to `1e-10`.
- `œÉ‚Çò‚Çê‚Çì`: the maximum value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm. Defaults to `1e10`.
- `œÉ‚ÇÅ`: the initial value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm.. Defaults to `1.0`.
- `M`: The monotonicity of the algorithm is determined by a this positive integer.
  A value of 1 for `M` would result in strict monotonicity in the decrease of the L2-norm
  of the function `f`. However, higher values allow for more flexibility in this reduction.
  Despite this, the algorithm still ensures global convergence through the use of a
  non-monotone line-search algorithm that adheres to the Grippo-Lampariello-Lucidi
  condition. Values in the range of 5 to 20 are usually sufficient, but some cases may call
  for a higher value of `M`. The default setting is 10.
- `Œ≥`: a parameter that influences if a proposed step will be accepted. Higher value of `Œ≥`
  will make the algorithm more restrictive in accepting steps. Defaults to `1e-4`.
- `œÑ‚Çò·µ¢‚Çô`: if a step is rejected the new step size will get multiplied by factor, and this
  parameter is the minimum value of that factor. Defaults to `0.1`.
- `œÑ‚Çò‚Çê‚Çì`: if a step is rejected the new step size will get multiplied by factor, and this
  parameter is the maximum value of that factor. Defaults to `0.5`.
- `n‚Çë‚Çì‚Çö`: the exponent of the loss, i.e. ``f‚Çô=||F(x‚Çô)||^{n‚Çë‚Çì‚Çö}``. The paper uses
  `n‚Çë‚Çì‚Çö ‚àà {1,2}`. Defaults to `2`.
- `Œ∑‚Çõ`:  function to determine the parameter `Œ∑`, which enables growth
  of ``||f‚Çô||^2``. Called as ``Œ∑ = Œ∑‚Çõ(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô)`` with `f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ` initialized as
  ``f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ=||f(x‚ÇÅ)||^{n‚Çë‚Çì‚Çö}``, `n` is the iteration number, `x‚Çô` is the current `x`-value and
  `f‚Çô` the current residual. Should satisfy ``Œ∑ > 0`` and ``‚àë‚Çñ Œ∑‚Çñ < ‚àû``. Defaults to
  ``f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ / n^2``.
- `max_inner_iterations`: the maximum number of iterations allowed for the inner loop of the
  algorithm. Defaults to `1000`.
"""
(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ / n^2
struct DFSane{T, F} <: AbstractNonlinearSolveAlgorithm
    œÉ‚Çò·µ¢‚Çô::T
    œÉ‚Çò‚Çê‚Çì::T
    œÉ‚ÇÅ::T
    M::Int
    Œ≥::T
    œÑ‚Çò·µ¢‚Çô::T
    œÑ‚Çò‚Çê‚Çì::T
    n‚Çë‚Çì‚Çö::Int
    Œ∑‚Çõ::F
    max_inner_iterations::Int
end

function DFSane(; œÉ‚Çò·µ¢‚Çô = 1e-10,
                œÉ‚Çò‚Çê‚Çì = 1e+10,
                œÉ‚ÇÅ = 1.0,
                M = 10,
                Œ≥ = 1e-4,
                œÑ‚Çò·µ¢‚Çô = 0.1,
                œÑ‚Çò‚Çê‚Çì = 0.5,
                n‚Çë‚Çì‚Çö = 2,
                Œ∑‚Çõ = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ / n^2,
                max_inner_iterations = 1000)
    return DFSane{typeof(œÉ‚Çò·µ¢‚Çô), typeof(Œ∑‚Çõ)}(œÉ‚Çò·µ¢‚Çô,
                                            œÉ‚Çò‚Çê‚Çì,
                                            œÉ‚ÇÅ,
                                            M,
                                            Œ≥,
                                            œÑ‚Çò·µ¢‚Çô,
                                            œÑ‚Çò‚Çê‚Çì,
                                            n‚Çë‚Çì‚Çö,
                                            Œ∑‚Çõ,
                                            max_inner_iterations)
end
mutable struct DFSaneCache{iip, fType, algType, uType, resType, T, pType,
                           INType,
                           tolType,
                           probType}
    f::fType
    alg::algType
    u‚Çô::uType
    u‚Çô‚Çã‚ÇÅ::uType
    fu‚Çô::resType
    fu‚Çô‚Çã‚ÇÅ::resType
    ùíπ::uType
    ‚Ñã::uType
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ::T
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ::T
    M::Int
    œÉ‚Çô::T
    œÉ‚Çò·µ¢‚Çô::T
    œÉ‚Çò‚Çê‚Çì::T
    Œ±‚ÇÅ::T
    Œ≥::T
    œÑ‚Çò·µ¢‚Çô::T
    œÑ‚Çò‚Çê‚Çì::T
    n‚Çë‚Çì‚Çö::Int
    p::pType
    force_stop::Bool
    maxiters::Int
    internalnorm::INType
    retcode::SciMLBase.ReturnCode.T
    abstol::tolType
    prob::probType
    stats::NLStats
    function DFSaneCache{iip}(f::fType, alg::algType, u‚Çô::uType, u‚Çô‚Çã‚ÇÅ::uType,
                              fu‚Çô::resType, fu‚Çô‚Çã‚ÇÅ::resType, ùíπ::uType, ‚Ñã::uType,
                              f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ::T, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ::T, M::Int, œÉ‚Çô::T, œÉ‚Çò·µ¢‚Çô::T, œÉ‚Çò‚Çê‚Çì::T,
                              Œ±‚ÇÅ::T, Œ≥::T, œÑ‚Çò·µ¢‚Çô::T, œÑ‚Çò‚Çê‚Çì::T, n‚Çë‚Çì‚Çö::Int, p::pType,
                              force_stop::Bool, maxiters::Int, internalnorm::INType,
                              retcode::SciMLBase.ReturnCode.T, abstol::tolType,
                              prob::probType,
                              stats::NLStats) where {iip, fType, algType, uType,
                                                     resType, T, pType, INType,
                                                     tolType,
                                                     probType
                                                     }
        new{iip, fType, algType, uType, resType, T, pType, INType, tolType,
            probType
            }(f, alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, M, œÉ‚Çô,
              œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô,
              œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, p, force_stop, maxiters, internalnorm,
              retcode,
              abstol, prob, stats)
    end
end

function SciMLBase.__init(prob::NonlinearProblem{uType, iip}, alg::DFSane,
                          args...;
                          alias_u0 = false,
                          maxiters = 1000,
                          abstol = 1e-6,
                          internalnorm = DEFAULT_NORM,
                          kwargs...) where {uType, iip}
    if alias_u0
        u‚Çô = prob.u0
    else
        u‚Çô = deepcopy(prob.u0)
    end

    p = prob.p
    T = eltype(u‚Çô)
    œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì = T(alg.œÉ‚Çò·µ¢‚Çô), T(alg.œÉ‚Çò‚Çê‚Çì), T(alg.Œ≥), T(alg.œÑ‚Çò·µ¢‚Çô), T(alg.œÑ‚Çò‚Çê‚Çì)
    Œ±‚ÇÅ = one(T)
    Œ≥ = T(alg.Œ≥)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = Œ±‚ÇÅ
    œÉ‚Çô = T(alg.œÉ‚ÇÅ)
    M = alg.M
    n‚Çë‚Çì‚Çö = alg.n‚Çë‚Çì‚Çö
    ùíπ, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ = copy(u‚Çô), copy(u‚Çô), copy(u‚Çô), copy(u‚Çô)

    if iip
        f = (dx, x) -> prob.f(dx, x, p)
        f(fu‚Çô‚Çã‚ÇÅ, u‚Çô‚Çã‚ÇÅ)

    else
        f = (x) -> prob.f(x, p)
        fu‚Çô‚Çã‚ÇÅ = f(u‚Çô‚Çã‚ÇÅ)
    end

    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = norm(fu‚Çô‚Çã‚ÇÅ)^n‚Çë‚Çì‚Çö
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

    ‚Ñã = fill(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, M)

    return DFSaneCache{iip}(f, alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ,
                            M, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô,
                            œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, p, false, maxiters,
                            internalnorm, ReturnCode.Default, abstol, prob,
                            NLStats(1, 0, 0, 0, 0))
end

function perform_step!(cache::DFSaneCache{true})
    @unpack f, alg, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ,
    œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, M = cache

    T = eltype(cache.u‚Çô)
    n = cache.stats.nsteps

    # Spectral parameter range check
    œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. cache.ùíπ = -œÉ‚Çô * cache.fu‚Çô‚Çã‚ÇÅ

    Œ∑ = alg.Œ∑‚Çõ(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, n, cache.u‚Çô‚Çã‚ÇÅ, cache.fu‚Çô‚Çã‚ÇÅ)

    fÃÑ = maximum(cache.‚Ñã)
    Œ±‚Çä = Œ±‚ÇÅ
    Œ±‚Çã = Œ±‚ÇÅ
    @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ

    f(cache.fu‚Çô, cache.u‚Çô)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    for _ in 1:(cache.alg.max_inner_iterations)
        ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô ‚â§ ùí∏ && break

        Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ /
                   (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                   œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
                   œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * cache.ùíπ

        f(cache.fu‚Çô, cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏ && break

        Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                   œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
                   œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)

        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ
        f(cache.fu‚Çô, cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    end

    if cache.internalnorm(cache.fu‚Çô) < cache.abstol
        cache.force_stop = true
    end

    # Update spectral parameter
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô - cache.u‚Çô‚Çã‚ÇÅ
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô - cache.fu‚Çô‚Çã‚ÇÅ

    Œ±‚Çä = sum(abs2, cache.u‚Çô‚Çã‚ÇÅ)
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô‚Çã‚ÇÅ * cache.fu‚Çô‚Çã‚ÇÅ
    Œ±‚Çã = sum(cache.u‚Çô‚Çã‚ÇÅ)
    cache.œÉ‚Çô = Œ±‚Çä / Œ±‚Çã

    # Spectral parameter bounds check
    if abs(cache.œÉ‚Çô) > œÉ‚Çò‚Çê‚Çì || abs(cache.œÉ‚Çô) < œÉ‚Çò·µ¢‚Çô
        test_norm = sqrt(sum(abs2, cache.fu‚Çô‚Çã‚ÇÅ))
        if test_norm > 1
            cache.œÉ‚Çô = 1.0
        elseif test_norm < 1e-5
            cache.œÉ‚Çô = 1e5
        else
            cache.œÉ‚Çô = 1.0 / test_norm
        end
    end

    # Take step
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô
    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    cache.‚Ñã[n % M + 1] = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô
    cache.stats.nf += 1
    return nothing
end

function perform_step!(cache::DFSaneCache{false})
    @unpack f, alg, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ,
    œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, M = cache

    T = eltype(cache.u‚Çô)
    n = cache.stats.nsteps

    # Spectral parameter range check
    œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. cache.ùíπ = -œÉ‚Çô * cache.fu‚Çô‚Çã‚ÇÅ

    Œ∑ = alg.Œ∑‚Çõ(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, n, cache.u‚Çô‚Çã‚ÇÅ, cache.fu‚Çô‚Çã‚ÇÅ)

    fÃÑ = maximum(cache.‚Ñã)
    Œ±‚Çä = Œ±‚ÇÅ
    Œ±‚Çã = Œ±‚ÇÅ
    @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ

    cache.fu‚Çô .= f(cache.u‚Çô)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    for _ in 1:(cache.alg.max_inner_iterations)
        ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô ‚â§ ùí∏ && break

        Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ /
                   (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                   œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
                   œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * cache.ùíπ

        cache.fu‚Çô .= f(cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏ && break

        Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                   œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
                   œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)

        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ
        cache.fu‚Çô .= f(cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    end

    if cache.internalnorm(cache.fu‚Çô) < cache.abstol
        cache.force_stop = true
    end

    # Update spectral parameter
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô - cache.u‚Çô‚Çã‚ÇÅ
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô - cache.fu‚Çô‚Çã‚ÇÅ

    Œ±‚Çä = sum(abs2, cache.u‚Çô‚Çã‚ÇÅ)
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô‚Çã‚ÇÅ * cache.fu‚Çô‚Çã‚ÇÅ
    Œ±‚Çã = sum(cache.u‚Çô‚Çã‚ÇÅ)
    cache.œÉ‚Çô = Œ±‚Çä / Œ±‚Çã

    # Spectral parameter bounds check
    if abs(cache.œÉ‚Çô) > œÉ‚Çò‚Çê‚Çì || abs(cache.œÉ‚Çô) < œÉ‚Çò·µ¢‚Çô
        test_norm = sqrt(sum(abs2, cache.fu‚Çô‚Çã‚ÇÅ))
        if test_norm > 1
            cache.œÉ‚Çô = 1.0
        elseif test_norm < 1e-5
            cache.œÉ‚Çô = 1e5
        else
            cache.œÉ‚Çô = 1.0 / test_norm
        end
    end

    # Take step
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô
    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    cache.‚Ñã[n % M + 1] = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô
    cache.stats.nf += 1
    return nothing
end

function SciMLBase.solve!(cache::DFSaneCache)
    while !cache.force_stop && cache.stats.nsteps < cache.maxiters
        cache.stats.nsteps += 1
        perform_step!(cache)
    end

    if cache.stats.nsteps == cache.maxiters
        cache.retcode = ReturnCode.MaxIters
    else
        cache.retcode = ReturnCode.Success
    end

    SciMLBase.build_solution(cache.prob, cache.alg, cache.u‚Çô, cache.fu‚Çô;
                             retcode = cache.retcode, stats = cache.stats)
end
