mutable struct DFSaneCache{iip}
    f::fType
    alg::algType
    u::uType
    fu::resType
    p::pType
    force_stop::Bool
    maxiters::Int
    internalnorm::INType
    retcode::SciMLBase.ReturnCode.T
    abstol::tolType
    prob::probType
    stats::NLStats
    

    function DFSaneCache()
    end
end

function SciMLBase.__init(prob::NonlinearProblem{uType, iip}, alg::DFSane,
                          args...;
                          alias_u0 = false,
                          maxiters = 1000,
                          abstol = 1e-6,
                          internalnorm = DEFAULT_NORM,
                          kwargs...) where {uType, iip}
    if alias_u0
        u = prob.u0
    else
        u = deepcopy(prob.u0)
    end
    f = prob.f
    p = prob.p
    if iip
        fu = zero(u)
        f(fu, u, p)
    else
        fu = f(u, p)
    end

    return DFSaneCache{iip}(f, alg, u, fu, p, false, maxiters, internalnorm,
                            ReturnCode.Default, abstol, prob, NLStats(1,0,0,0,0)) # What should NL stats be?
end

function perform_step!(cache::DFSaneCache{true})
    @unpack œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, ùíπ, f‚Çô‚Çã‚ÇÅ,f‚Çô, n,
    x‚Çô‚Çã‚ÇÅ, fÃÑ, ‚Ñã, Œ±‚Çä, Œ±‚ÇÅ, Œ±‚Çã, x‚Çô,Œ∑,ff!, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, = cache

    # Spectral parameter range check
    @. œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. ùíπ = -œÉ‚Çô * f‚Çô‚Çã‚ÇÅ

    Œ∑ = Œ∑‚Çõ(n, x‚Çô‚Çã‚ÇÅ, f‚Çô‚Çã‚ÇÅ)
    maximum!(fÃÑ, ‚Ñã)
    fill!(Œ±‚Çä, Œ±‚ÇÅ)
    fill!(Œ±‚Çã, Œ±‚ÇÅ)
    @. x‚Çô = x‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ

    ff(f‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)

    for _ in 1:(cache.max_inner_iterations)
        ùí∏ = @. fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

        @. Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
            œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
        @. x‚Çô = x‚Çô‚Çã‚ÇÅ - Œ±‚Çã * ùíπ
        ff(f‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)

        (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

        @. Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
            œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)
        @. x‚Çô = x‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ
        ff(f‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)
    end

    if cache.internalnorm(cache.f‚Çô) < cache.abstol
        cache.force_stop = true
    end

    # Update spectral parameter
    @. x‚Çô‚Çã‚ÇÅ = x‚Çô - x‚Çô‚Çã‚ÇÅ
    @. f‚Çô‚Çã‚ÇÅ = f‚Çô - f‚Çô‚Çã‚ÇÅ

    sum!(abs2, Œ±‚Çä, x‚Çô‚Çã‚ÇÅ)
    sum!(Œ±‚Çã, x‚Çô‚Çã‚ÇÅ .* f‚Çô‚Çã‚ÇÅ)
    œÉ‚Çô .= Œ±‚Çä ./ (Œ±‚Çã .+ T(1e-5))

    # Take step
    @. x‚Çô‚Çã‚ÇÅ = x‚Çô
    @. f‚Çô‚Çã‚ÇÅ = f‚Çô
    @. f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    ‚Ñã[n % M + 1, :] .= view(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, 1, :)
    return nothing
end

function perform_step!(cache::DFSaneCache{false})
    return nothing
end

function SciMLBase.solve!(cache::DFSaneCache)
    while !cache.force_stop && cache.stats.nsteps < cache.maxiters
        perform_step!(cache)
        cache.stats.nsteps += 1
    end

    if cache.stats.nsteps == cache.maxiters
        cache.retcode = ReturnCode.MaxIters
    else
        cache.retcode = ReturnCode.Success
    end

    SciMLBase.build_solution(cache.prob, cache.alg, cache.u, cache.fu;
                             retcode = cache.retcode, stats = cache.stats)
end
