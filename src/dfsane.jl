struct DFSane{T}#<:AbstractNonlinearSolveAlgorithm
    œÉ‚Çò·µ¢‚Çô::T 
    œÉ‚Çò‚Çê‚Çì::T 
    œÉ‚ÇÅ::T
    M::Int
    Œ≥::T
    œÑ‚Çò·µ¢‚Çô::T
    œÑ‚Çò‚Çê‚Çì::T 
    n‚Çë‚Çì‚Çö::Int
    # Œ∑‚Çõ::F = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ ./ n .^ 2 # Would this change ever?
    max_inner_iterations::Int
end

function DFSane(;
    œÉ‚Çò·µ¢‚Çô = 1.0f-10,
    œÉ‚Çò‚Çê‚Çì = 1.0f+10,
    œÉ‚ÇÅ = 1.0f0,
    M = 10,
    Œ≥ = 1.0f-4,
    œÑ‚Çò·µ¢‚Çô = 0.1f0,
    œÑ‚Çò‚Çê‚Çì = 0.5f0,
    n‚Çë‚Çì‚Çö= 2,
    #Œ∑‚Çõ::F = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ ./ n .^ 2
    max_inner_iterations = 1000)

    return DFSane{typeof(œÉ‚Çò·µ¢‚Çô)}(œÉ‚Çò·µ¢‚Çô, # Typeof thing?
    œÉ‚Çò‚Çê‚Çì,
    œÉ‚ÇÅ,
    M,
    Œ≥,
    œÑ‚Çò·µ¢‚Çô,
    œÑ‚Çò‚Çê‚Çì,
    n‚Çë‚Çì‚Çö,
    #Œ∑‚Çõ::F = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ ./ n .^ 2
    max_inner_iterations)
end
mutable struct DFSaneCache{iip}
    f::fType
    alg::algType
    u‚Çô::uType
    u‚Çô‚Çã‚ÇÅ::uType
    fu‚Çô::resType
    fu‚Çô‚Çã‚ÇÅ::resType
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô::resType
    fÃÑ::resType
    ff::Function
    p::pType
    force_stop::Bool
    maxiters::Int
    internalnorm::INType
    retcode::SciMLBase.ReturnCode.T
    abstol::tolType
    prob::probType
    stats::NLStats
    œÉ‚Çô::œÉ‚ÇôType
    œÉ‚Çò·µ¢‚Çô::œÉType
    œÉ‚Çò‚Çê‚Çì::œÉType
    œÉ_sign::œÉType
    Œ±‚ÇÅ::Œ±‚ÇÅType
    Œ±‚Çã::Œ±Type
    Œ±‚Çä::Œ±Type
    ùíπ::ùíπType
    ‚Ñã::‚ÑãType
    Œ∑::Œ∑Type
    ùí∏::ùí∏Type
    N::NType
    function DFSaneCache()
    end
end

function SciMLBase.__init(prob::NonlinearProblem{uType, iip}, alg::DFSane,
                          args...;
                          alias_u0 = false,
                          maxiters = 1000,
                          abstol = 1e-6,
                          internalnorm = DEFAULT_NORM,
                          kwargs...) where {uType, iip}
    if alias_u0
        u = prob.u0
    else
        u = deepcopy(prob.u0)
    end
    f = prob.f
    p = prob.p
    if iip
        fu = zero(u)
        f(fu, u, p)
    else
        fu = f(u, p)
    end

    return DFSaneCache{iip}(f, alg, u, fu, p, false, maxiters, internalnorm,
                            ReturnCode.Default, abstol, prob, NLStats(1, 0, 0, 0, 0)) # What should NL stats be?
end

function perform_step!(cache::DFSaneCache{true})
    @unpack œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, ùíπ, fu‚Çô‚Çã‚ÇÅ, fu‚Çô,
    u‚Çô‚Çã‚ÇÅ, fÃÑ, ‚Ñã, Œ±‚Çä, Œ±‚ÇÅ, Œ±‚Çã, u‚Çô, Œ∑, ff, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô,f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çã‚ÇÅ, Œ≥, N, = cache

    T = eltype(u‚Çô)
    n = cache.stats.nsteps
    # Spectral parameter range check
    @. œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. ùíπ = -œÉ‚Çô * fu‚Çô‚Çã‚ÇÅ

    @. Œ∑ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çã‚ÇÅ / n^2 # Will rename initial norm

    maximum!(fÃÑ, ‚Ñã)
    fill!(Œ±‚Çä, Œ±‚ÇÅ)
    fill!(Œ±‚Çã, Œ±‚ÇÅ)
    @. u‚Çô = u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ

    ff(fu‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, u‚Çô)

    for _ in 1:(cache.max_inner_iterations)
       @. ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

       @. Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ /
                             (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                             œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
                             œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)

        @. u‚Çô = u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * ùíπ
        ff(fu‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, u‚Çô)

        (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

        @. Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                      œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
                      œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)
        @. u‚Çô = u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ
        ff(fu‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, u‚Çô)
    end

    if cache.internalnorm(cache.fu‚Çô) < cache.abstol
        cache.force_stop = true
    end

    # Update spectral parameter
    @. u‚Çã‚ÇÅ = u - u‚Çã‚ÇÅ
    @. fu‚Çã‚ÇÅ = fu - fu‚Çã‚ÇÅ

    sum!(abs2, Œ±‚Çä, u‚Çã‚ÇÅ)
    sum!(Œ±‚Çã, u‚Çã‚ÇÅ .* fu‚Çã‚ÇÅ)
    œÉ‚Çô .= Œ±‚Çä ./ (Œ±‚Çã .+ T(1e-5))

    # Take step
    @. u‚Çã‚ÇÅ = u
    @. fu‚Çã‚ÇÅ = fu
    @. f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    ‚Ñã[n % M + 1, :] .= view(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, 1, :)
    cache.stats.nf += 1
    return nothing
end

function perform_step!(cache::DFSaneCache{false})
    return nothing
end

function SciMLBase.solve!(cache::DFSaneCache)
    while !cache.force_stop && cache.stats.nsteps < cache.maxiters
        perform_step!(cache)
        cache.stats.nsteps += 1
    end

    if cache.stats.nsteps == cache.maxiters
        cache.retcode = ReturnCode.MaxIters
    else
        cache.retcode = ReturnCode.Success
    end

    SciMLBase.build_solution(cache.prob, cache.alg, cache.u, cache.fu;
                             retcode = cache.retcode, stats = cache.stats)
end
