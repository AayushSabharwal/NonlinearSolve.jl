struct DFSane{T, F} <: AbstractNonlinearSolveAlgorithm
    œÉ‚Çò·µ¢‚Çô::T
    œÉ‚Çò‚Çê‚Çì::T
    œÉ‚ÇÅ::T
    M::Int
    Œ≥::T
    œÑ‚Çò·µ¢‚Çô::T
    œÑ‚Çò‚Çê‚Çì::T
    n‚Çë‚Çì‚Çö::Int
    Œ∑‚Çõ::F
    max_inner_iterations::Int
end

function DFSane(;
                œÉ‚Çò·µ¢‚Çô = 1.0f-10,
                œÉ‚Çò‚Çê‚Çì = 1.0f+10,
                œÉ‚ÇÅ = 1.0f0,
                M = 10,
                Œ≥ = 1.0f-4,
                œÑ‚Çò·µ¢‚Çô = 0.1f0,
                œÑ‚Çò‚Çê‚Çì = 0.5f0,
                n‚Çë‚Çì‚Çö = 2,
                Œ∑‚Çõ = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ / n^2,
                max_inner_iterations = 1000)
    return DFSane{typeof(œÉ‚Çò·µ¢‚Çô), typeof(Œ∑‚Çõ)}(œÉ‚Çò·µ¢‚Çô, # Typeof thing?
                                            œÉ‚Çò‚Çê‚Çì,
                                            œÉ‚ÇÅ,
                                            M,
                                            Œ≥,
                                            œÑ‚Çò·µ¢‚Çô,
                                            œÑ‚Çò‚Çê‚Çì,
                                            n‚Çë‚Çì‚Çö,
                                            Œ∑‚Çõ,
                                            max_inner_iterations)
end
mutable struct DFSaneCache{iip, fType, ffType, algType, uType, resType, T, Œ∑‚ÇõType, pType,
                           INType,
                           tolType,
                           probType}
    f::fType
    ff::ffType
    alg::algType
    u‚Çô::uType
    u‚Çô‚Çã‚ÇÅ::uType
    fu‚Çô::resType
    fu‚Çô‚Çã‚ÇÅ::resType
    ùíπ::uType
    ‚Ñã::uType
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô::T
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ::T
    fÃÑ::T
    M::Int
    œÉ‚Çô::T
    œÉ‚Çò·µ¢‚Çô::T
    œÉ‚Çò‚Çê‚Çì::T
    Œ±‚ÇÅ::T
    Œ±‚Çã::T
    Œ±‚Çä::T
    Œ∑::T
    Œ≥::T
    œÑ‚Çò·µ¢‚Çô::T
    œÑ‚Çò‚Çê‚Çì::T
    Œ∑‚Çõ::Œ∑‚ÇõType
    p::pType
    force_stop::Bool
    maxiters::Int
    internalnorm::INType
    retcode::SciMLBase.ReturnCode.T
    abstol::tolType
    prob::probType
    stats::NLStats
    function DFSaneCache{iip}(f::fType, ff::ffType, alg::algType, u‚Çô::uType, u‚Çô‚Çã‚ÇÅ::uType,
                              fu‚Çô::resType, fu‚Çô‚Çã‚ÇÅ::resType, ùíπ::uType, ‚Ñã::uType, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô::T,
                              f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ::T, fÃÑ::T, M::Int, œÉ‚Çô::T, œÉ‚Çò·µ¢‚Çô::T, œÉ‚Çò‚Çê‚Çì::T, Œ±‚ÇÅ::T,
                              Œ±‚Çã::T,
                              Œ±‚Çä::T, Œ∑::T, Œ≥::T, œÑ‚Çò·µ¢‚Çô::T, œÑ‚Çò‚Çê‚Çì::T, Œ∑‚Çõ::Œ∑‚ÇõType, p::pType,
                              force_stop::Bool,
                              maxiters::Int,
                              internalnorm::INType, retcode::SciMLBase.ReturnCode.T,
                              abstol::tolType, prob::probType,
                              stats::NLStats) where {iip, fType, ffType, algType, uType,
                                                     resType, T, Œ∑‚ÇõType, pType, INType,
                                                     tolType,
                                                     probType
                                                     }
        new{iip, fType, ffType, algType, uType, resType, T, Œ∑‚ÇõType, pType, INType, tolType,
            probType
            }(f, ff, alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, fÃÑ, M, œÉ‚Çô,
              œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ±‚Çã, Œ±‚Çä, Œ∑, Œ≥, œÑ‚Çò·µ¢‚Çô,
              œÑ‚Çò‚Çê‚Çì, Œ∑‚Çõ, p, force_stop, maxiters, internalnorm,
              retcode,
              abstol, prob, stats)
    end
end

function SciMLBase.__init(prob::NonlinearProblem{uType, iip}, alg::DFSane,
                          args...;
                          alias_u0 = false,
                          maxiters = 1000,
                          abstol = 1e-6,
                          internalnorm = DEFAULT_NORM,
                          kwargs...) where {uType, iip}
    if alias_u0
        u‚Çô = prob.u0
    else
        u‚Çô = deepcopy(prob.u0)
    end
    p = prob.p

    T = eltype(u‚Çô)

    œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì = T(alg.œÉ‚Çò·µ¢‚Çô), T(alg.œÉ‚Çò‚Çê‚Çì), T(alg.Œ≥), T(alg.œÑ‚Çò·µ¢‚Çô), T(alg.œÑ‚Çò‚Çê‚Çì)
    Œ±‚ÇÅ = one(T)
    Œ±‚Çä, Œ±‚Çã = Œ±‚ÇÅ, Œ±‚ÇÅ
    Œ∑ = Œ±‚ÇÅ
    Œ≥ = T(alg.Œ≥)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = Œ±‚ÇÅ, Œ±‚ÇÅ
    œÉ‚Çô = T(alg.œÉ‚ÇÅ)
    M = alg.M
    n‚Çë‚Çì‚Çö = alg.n‚Çë‚Çì‚Çö
    ùíπ, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ = copy(u‚Çô), copy(u‚Çô), copy(u‚Çô), copy(u‚Çô)

    if iip
        f(dx, x) = prob.f(dx, x, p)
        function ff(f‚Çì, x)
            f(f‚Çì, x)
            f‚Çô‚Çí·µ£‚Çò = sum(abs2, f‚Çì)
            f‚Çô‚Çí·µ£‚Çò ^= (n‚Çë‚Çì‚Çö / 2)
            return f‚Çô‚Çí·µ£‚Çò
        end
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = ff(fu‚Çô‚Çã‚ÇÅ, u‚Çô‚Çã‚ÇÅ)
    else
        f(x) = prob.f(x, p)
        function ff!(x)
            f‚Çì = f(x)
            sum!(abs2, f‚Çô‚Çí·µ£‚Çò, f‚Çì)
            f‚Çô‚Çí·µ£‚Çò ^= (n‚Çë‚Çì‚Çö / 2)
            return f‚Çì, f‚Çô‚Çí·µ£‚Çò
        end
        fu‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = ff(u‚Çô‚Çã‚ÇÅ)
    end

    ‚Ñã = fill(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, M)
    fÃÑ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ
    Œ∑‚Çõ = (n, x‚Çô, f‚Çô) -> alg.Œ∑‚Çõ(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, n, x‚Çô, f‚Çô)

    return DFSaneCache{iip}(f, ff, alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ,
                            fÃÑ, M, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ±‚Çã, Œ±‚Çä, Œ∑, Œ≥, œÑ‚Çò·µ¢‚Çô,
                            œÑ‚Çò‚Çê‚Çì, Œ∑‚Çõ, p, false, maxiters,
                            internalnorm, ReturnCode.Default, abstol, prob,
                            NLStats(1, 0, 0, 0, 0)) # What should NL stats be?
end

function perform_step!(cache::DFSaneCache{true})
    if isdefined(Main, :Infiltrator)
        Main.infiltrate(@__MODULE__, Base.@locals, @__FILE__, @__LINE__)
    end
    @unpack ff, alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ,
    fÃÑ, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ±‚Çã, Œ±‚Çä, Œ∑, Œ≥, Œ∑‚Çõ, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, M = cache

    T = eltype(u‚Çô)
    cache.stats.nsteps += 1
    n = cache.stats.nsteps
    # Spectral parameter range check
    œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. ùíπ = -œÉ‚Çô * fu‚Çô‚Çã‚ÇÅ

    Œ∑ = Œ∑‚Çõ(n, u‚Çô‚Çã‚ÇÅ, fu‚Çô‚Çã‚ÇÅ)

    fÃÑ = maximum(‚Ñã)
    Œ±‚Çä = Œ±‚ÇÅ
    Œ±‚Çã = Œ±‚ÇÅ
    @. u‚Çô = u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ

    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = ff(fu‚Çô, u‚Çô)

    for _ in 1:(cache.max_inner_iterations)
        ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) && break

        Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ /
                   (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                   œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
                   œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)  
        @. u‚Çô = u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ # correct order?

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = ff(fu‚Çô, u‚Çô)

        (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) && break

        Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                      œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
                      œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)  
        @. u‚Çô = u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * ùíπ # correct order?
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = ff(fu‚Çô, u‚Çô)
    end

    if cache.internalnorm(cache.fu‚Çô) < cache.abstol
        cache.force_stop = true
    end

    # Update spectral parameter
    @. u‚Çô‚Çã‚ÇÅ = u‚Çô - u‚Çô‚Çã‚ÇÅ
    @. fu‚Çô‚Çã‚ÇÅ = fu‚Çô - fu‚Çô‚Çã‚ÇÅ

    Œ±‚Çä = sum(abs2, u‚Çô‚Çã‚ÇÅ)
    Œ±‚Çã = sum(u‚Çô‚Çã‚ÇÅ .* fu‚Çô‚Çã‚ÇÅ)
    œÉ‚Çô = Œ±‚Çä / (Œ±‚Çã + T(1e-5))

    # Take step
    @. u‚Çô‚Çã‚ÇÅ = u‚Çô
    @. fu‚Çô‚Çã‚ÇÅ = fu‚Çô
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    ‚Ñã[n % M + 1] = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô
    cache.stats.nf += 1
    @pack! cache = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, œÉ‚Çô
    return nothing
end

function SciMLBase.solve!(cache::DFSaneCache)
    while !cache.force_stop && cache.stats.nsteps < cache.maxiters
        perform_step!(cache)
        cache.stats.nsteps += 1
    end

    if cache.stats.nsteps == cache.maxiters
        cache.retcode = ReturnCode.MaxIters
    else
        cache.retcode = ReturnCode.Success
    end

    SciMLBase.build_solution(cache.prob, cache.alg, cache.u, cache.fu;
                             retcode = cache.retcode, stats = cache.stats)
end
