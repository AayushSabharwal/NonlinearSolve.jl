"""
    DFSane(; œÉ_min::Real = 1e-10, œÉ_max::Real = 1e10, œÉ_1::Real = 1.0,
        M::Int = 10, Œ≥::Real = 1e-4, œÑ_min::Real = 0.1, œÑ_max::Real = 0.5,
        n_exp::Int = 2, Œ∑_strategy::Function = (fn_1, n, x_n, f_n) -> fn_1 / n^2,
        max_inner_iterations::Int = 1000)

A low-overhead and allocation-free implementation of the df-sane method for solving large-scale nonlinear
systems of equations. For in depth information about all the parameters and the algorithm,
see the paper: [W LaCruz, JM Martinez, and M Raydan (2006), Spectral residual mathod without
gradient information for solving large-scale nonlinear systems of equations, Mathematics of
Computation, 75, 1429-1448.](https://www.researchgate.net/publication/220576479_Spectral_Residual_Method_without_Gradient_Information_for_Solving_Large-Scale_Nonlinear_Systems_of_Equations)

See also the implementation in [SimpleNonlinearSolve.jl](https://github.com/SciML/SimpleNonlinearSolve.jl/blob/main/src/dfsane.jl)

### Keyword Arguments

- `œÉ_min`: the minimum value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm. Defaults to `1e-10`.
- `œÉ_max`: the maximum value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm. Defaults to `1e10`.
- `œÉ_1`: the initial value of the spectral coefficient `œÉ‚Çô` which is related to the step
  size in the algorithm.. Defaults to `1.0`.
- `M`: The monotonicity of the algorithm is determined by a this positive integer.
  A value of 1 for `M` would result in strict monotonicity in the decrease of the L2-norm
  of the function `f`. However, higher values allow for more flexibility in this reduction.
  Despite this, the algorithm still ensures global convergence through the use of a
  non-monotone line-search algorithm that adheres to the Grippo-Lampariello-Lucidi
  condition. Values in the range of 5 to 20 are usually sufficient, but some cases may call
  for a higher value of `M`. The default setting is 10.
- `Œ≥`: a parameter that influences if a proposed step will be accepted. Higher value of `Œ≥`
  will make the algorithm more restrictive in accepting steps. Defaults to `1e-4`.
- `œÑ_min`: if a step is rejected the new step size will get multiplied by factor, and this
  parameter is the minimum value of that factor. Defaults to `0.1`.
- `œÑ_max`: if a step is rejected the new step size will get multiplied by factor, and this
  parameter is the maximum value of that factor. Defaults to `0.5`.
- `n_exp`: the exponent of the loss, i.e. ``f_n=||F(x_n)||^{n_exp}``. The paper uses
  `n_exp ‚àà {1,2}`. Defaults to `2`.
- `Œ∑_strategy`:  function to determine the parameter `Œ∑`, which enables growth
  of ``||f_n||^2``. Called as ``Œ∑ = Œ∑_strategy(fn_1, n, x_n, f_n)`` with `fn_1` initialized as
  ``fn_1=||f(x_1)||^{n_exp}``, `n` is the iteration number, `x_n` is the current `x`-value and
  `f_n` the current residual. Should satisfy ``Œ∑ > 0`` and ``‚àë‚Çñ Œ∑‚Çñ < ‚àû``. Defaults to
  ``fn_1 / n^2``.
- `max_inner_iterations`: the maximum number of iterations allowed for the inner loop of the
  algorithm. Defaults to `1000`.
"""
struct DFSane{T, F} <: AbstractNonlinearSolveAlgorithm
    œÉ_min::T
    œÉ_max::T
    œÉ_1::T
    M::Int
    Œ≥::T
    œÑ_min::T
    œÑ_max::T
    n_exp::Int
    Œ∑_strategy::F
    max_inner_iterations::Int
end

function DFSane(; œÉ_min = 1e-10, œÉ_max = 1e+10, œÉ_1 = 1.0, M = 10, Œ≥ = 1e-4, œÑ_min = 0.1,
    œÑ_max = 0.5, n_exp = 2, Œ∑_strategy = (fn_1, n, x_n, f_n) -> fn_1 / n^2,
    max_inner_iterations = 1000)
    return DFSane{typeof(œÉ_min), typeof(Œ∑_strategy)}(œÉ_min, œÉ_max, œÉ_1, M, Œ≥, œÑ_min, œÑ_max,
        n_exp, Œ∑_strategy, max_inner_iterations)
end

@concrete mutable struct DFSaneCache{iip}
    alg
    u‚Çô
    u‚Çô‚Çã‚ÇÅ
    fu‚Çô
    fu‚Çô‚Çã‚ÇÅ
    ùíπ
    ‚Ñã
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ
    M
    œÉ‚Çô
    œÉ‚Çò·µ¢‚Çô
    œÉ‚Çò‚Çê‚Çì
    Œ±‚ÇÅ
    Œ≥
    œÑ‚Çò·µ¢‚Çô
    œÑ‚Çò‚Çê‚Çì
    n‚Çë‚Çì‚Çö::Int
    p
    force_stop::Bool
    maxiters::Int
    internalnorm
    retcode::SciMLBase.ReturnCode.T
    abstol
    reltol
    prob
    stats::NLStats
    termination_condition
    tc_storage
end

function SciMLBase.__init(prob::NonlinearProblem{uType, iip}, alg::DFSane, args...;
    alias_u0 = false, maxiters = 1000, abstol = nothing, reltol = nothing,
    termination_condition = nothing, internalnorm = DEFAULT_NORM,
    kwargs...) where {uType, iip}
    u‚Çô = alias_u0 ? prob.u0 : deepcopy(prob.u0)

    p = prob.p
    T = eltype(u‚Çô)
    œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì = T(alg.œÉ_min), T(alg.œÉ_max), T(alg.Œ≥), T(alg.œÑ_min),
    T(alg.œÑ_max)
    Œ±‚ÇÅ = one(T)
    Œ≥ = T(alg.Œ≥)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = Œ±‚ÇÅ
    œÉ‚Çô = T(alg.œÉ_1)
    M = alg.M
    n‚Çë‚Çì‚Çö = alg.n_exp
    ùíπ, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ = copy(u‚Çô), copy(u‚Çô), copy(u‚Çô), copy(u‚Çô)

    if iip
        prob.f(fu‚Çô‚Çã‚ÇÅ, u‚Çô‚Çã‚ÇÅ, p)
    else
        fu‚Çô‚Çã‚ÇÅ = prob.f(u‚Çô‚Çã‚ÇÅ, p)
    end

    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = norm(fu‚Çô‚Çã‚ÇÅ)^n‚Çë‚Çì‚Çö
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

    ‚Ñã = fill(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, M)

    abstol, reltol, termination_condition = _init_termination_elements(abstol, reltol,
        termination_condition, T)

    mode = DiffEqBase.get_termination_mode(termination_condition)

    storage = mode ‚àà DiffEqBase.SAFE_TERMINATION_MODES ? NLSolveSafeTerminationResult() :
              nothing

    return DFSaneCache{iip}(alg, u‚Çô, u‚Çô‚Çã‚ÇÅ, fu‚Çô, fu‚Çô‚Çã‚ÇÅ, ùíπ, ‚Ñã, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ,
        M, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, p, false, maxiters,
        internalnorm, ReturnCode.Default, abstol, reltol, prob, NLStats(1, 0, 0, 0, 0),
        termination_condition, storage)
end

function perform_step!(cache::DFSaneCache{true})
    @unpack alg, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, M, tc_storage = cache

    termination_condition = cache.termination_condition(tc_storage)
    f = (dx, x) -> cache.prob.f(dx, x, cache.p)

    T = eltype(cache.u‚Çô)
    n = cache.stats.nsteps

    # Spectral parameter range check
    œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    @. cache.ùíπ = -œÉ‚Çô * cache.fu‚Çô‚Çã‚ÇÅ

    Œ∑ = alg.Œ∑_strategy(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, n, cache.u‚Çô‚Çã‚ÇÅ, cache.fu‚Çô‚Çã‚ÇÅ)

    fÃÑ = maximum(cache.‚Ñã)
    Œ±‚Çä = Œ±‚ÇÅ
    Œ±‚Çã = Œ±‚ÇÅ
    @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ

    f(cache.fu‚Çô, cache.u‚Çô)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    for jjj in 1:(cache.alg.max_inner_iterations)
        ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô ‚â§ ùí∏ && break

        Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çä, œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * cache.ùíπ

        f(cache.fu‚Çô, cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏ && break

        Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çã, œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)

        @. cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ
        f(cache.fu‚Çô, cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    end

    if termination_condition(cache.fu‚Çô, cache.u‚Çô, cache.u‚Çô‚Çã‚ÇÅ, cache.abstol, cache.reltol)
        cache.force_stop = true
    end

    # Update spectral parameter
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô - cache.u‚Çô‚Çã‚ÇÅ
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô - cache.fu‚Çô‚Çã‚ÇÅ

    Œ±‚Çä = sum(abs2, cache.u‚Çô‚Çã‚ÇÅ)
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô‚Çã‚ÇÅ * cache.fu‚Çô‚Çã‚ÇÅ
    Œ±‚Çã = sum(cache.u‚Çô‚Çã‚ÇÅ)
    cache.œÉ‚Çô = Œ±‚Çä / Œ±‚Çã

    # Spectral parameter bounds check
    if abs(cache.œÉ‚Çô) > œÉ‚Çò‚Çê‚Çì || abs(cache.œÉ‚Çô) < œÉ‚Çò·µ¢‚Çô
        test_norm = sqrt(sum(abs2, cache.fu‚Çô‚Çã‚ÇÅ))
        cache.œÉ‚Çô = clamp(T(1) / test_norm, T(1), T(1e5))
    end

    # Take step
    @. cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô
    @. cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô
    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    cache.‚Ñã[n % M + 1] = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô
    cache.stats.nf += 1
    return nothing
end

function perform_step!(cache::DFSaneCache{false})
    @unpack alg, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, œÉ‚Çô, œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ±‚ÇÅ, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì, n‚Çë‚Çì‚Çö, M, tc_storage = cache

    termination_condition = cache.termination_condition(tc_storage)
    f = x -> cache.prob.f(x, cache.p)

    T = eltype(cache.u‚Çô)
    n = cache.stats.nsteps

    # Spectral parameter range check
    œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

    # Line search direction
    cache.ùíπ = -œÉ‚Çô * cache.fu‚Çô‚Çã‚ÇÅ

    Œ∑ = alg.Œ∑_strategy(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ, n, cache.u‚Çô‚Çã‚ÇÅ, cache.fu‚Çô‚Çã‚ÇÅ)

    fÃÑ = maximum(cache.‚Ñã)
    Œ±‚Çä = Œ±‚ÇÅ
    Œ±‚Çã = Œ±‚ÇÅ
    cache.u‚Çô = cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ

    cache.fu‚Çô = f(cache.u‚Çô)
    f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    for _ in 1:(cache.alg.max_inner_iterations)
        ùí∏ = fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô ‚â§ ùí∏ && break

        Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çä, œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
        cache.u‚Çô = @. cache.u‚Çô‚Çã‚ÇÅ - Œ±‚Çã * cache.ùíπ

        cache.fu‚Çô = f(cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö

        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏ && break

        Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
            œÑ‚Çò·µ¢‚Çô * Œ±‚Çã, œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)

        cache.u‚Çô = @. cache.u‚Çô‚Çã‚ÇÅ + Œ±‚Çä * cache.ùíπ
        cache.fu‚Çô = f(cache.u‚Çô)
        f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = norm(cache.fu‚Çô)^n‚Çë‚Çì‚Çö
    end

    if termination_condition(cache.fu‚Çô, cache.u‚Çô, cache.u‚Çô‚Çã‚ÇÅ, cache.abstol, cache.reltol)
        cache.force_stop = true
    end

    # Update spectral parameter
    cache.u‚Çô‚Çã‚ÇÅ = @. cache.u‚Çô - cache.u‚Çô‚Çã‚ÇÅ
    cache.fu‚Çô‚Çã‚ÇÅ = @. cache.fu‚Çô - cache.fu‚Çô‚Çã‚ÇÅ

    Œ±‚Çä = sum(abs2, cache.u‚Çô‚Çã‚ÇÅ)
    cache.u‚Çô‚Çã‚ÇÅ = @. cache.u‚Çô‚Çã‚ÇÅ * cache.fu‚Çô‚Çã‚ÇÅ
    Œ±‚Çã = sum(cache.u‚Çô‚Çã‚ÇÅ)
    cache.œÉ‚Çô = Œ±‚Çä / Œ±‚Çã

    # Spectral parameter bounds check
    if abs(cache.œÉ‚Çô) > œÉ‚Çò‚Çê‚Çì || abs(cache.œÉ‚Çô) < œÉ‚Çò·µ¢‚Çô
        test_norm = sqrt(sum(abs2, cache.fu‚Çô‚Çã‚ÇÅ))
        cache.œÉ‚Çô = clamp(T(1) / test_norm, T(1), T(1e5))
    end

    # Take step
    cache.u‚Çô‚Çã‚ÇÅ = cache.u‚Çô
    cache.fu‚Çô‚Çã‚ÇÅ = cache.fu‚Çô
    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

    # Update history
    cache.‚Ñã[n % M + 1] = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô
    cache.stats.nf += 1
    return nothing
end

function SciMLBase.solve!(cache::DFSaneCache)
    while !cache.force_stop && cache.stats.nsteps < cache.maxiters
        cache.stats.nsteps += 1
        perform_step!(cache)
    end

    if cache.stats.nsteps == cache.maxiters
        cache.retcode = ReturnCode.MaxIters
    else
        cache.retcode = ReturnCode.Success
    end

    return SciMLBase.build_solution(cache.prob, cache.alg, cache.u‚Çô, cache.fu‚Çô;
        retcode = cache.retcode, stats = cache.stats)
end

function SciMLBase.reinit!(cache::DFSaneCache{iip}, u0 = cache.u‚Çô; p = cache.p,
    abstol = cache.abstol, reltol = cache.reltol,
    termination_condition = cache.termination_condition,
    maxiters = cache.maxiters) where {iip}
    cache.p = p
    if iip
        recursivecopy!(cache.u‚Çô, u0)
        recursivecopy!(cache.u‚Çô‚Çã‚ÇÅ, u0)
        cache.prob.f(cache.fu‚Çô, cache.u‚Çô, p)
        cache.prob.f(cache.fu‚Çô‚Çã‚ÇÅ, cache.u‚Çô, p)
    else
        cache.u‚Çô = u0
        cache.u‚Çô‚Çã‚ÇÅ = u0
        cache.fu‚Çô = cache.prob.f(cache.u‚Çô, p)
        cache.fu‚Çô‚Çã‚ÇÅ = cache.prob.f(cache.u‚Çô, p)
    end

    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = norm(cache.fu‚Çô‚Çã‚ÇÅ)^cache.n‚Çë‚Çì‚Çö
    cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÄ = cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ
    fill!(cache.‚Ñã, cache.f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ)

    T = eltype(cache.u‚Çô)
    cache.œÉ‚Çô = T(cache.alg.œÉ_1)

    termination_condition = _get_reinit_termination_condition(cache, abstol, reltol,
        termination_condition)

    cache.abstol = abstol
    cache.reltol = reltol
    cache.termination_condition = termination_condition
    cache.maxiters = maxiters
    cache.stats.nf = 1
    cache.stats.nsteps = 1
    cache.force_stop = false
    cache.retcode = ReturnCode.Default
    return cache
end
